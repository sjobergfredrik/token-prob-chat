{"ast":null,"code":"var _jsxFileName = \"/Users/sjobergf/Documents/chatProbs/token-prob-chat/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { getCompletion } from '../services/openaiService';\nimport Tippy from '@tippyjs/react';\nimport 'tippy.js/dist/tippy.css';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!prompt.trim()) return;\n\n    // Add user message immediately\n    const userMessage = {\n      type: 'user',\n      content: prompt.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError('');\n    setPrompt(''); // Clear input after sending\n\n    try {\n      const response = await getCompletion(prompt);\n\n      // Extract tokens and their probabilities from the completions API response\n      const {\n        text,\n        logprobs\n      } = response.choices[0];\n      const {\n        tokens,\n        token_logprobs,\n        top_logprobs\n      } = logprobs;\n\n      // Create token objects with probability data\n      const processedTokens = tokens.map((token, index) => ({\n        token,\n        probability: Math.exp(token_logprobs[index]),\n        // Convert log probability to probability\n        alternatives: top_logprobs[index] ? Object.entries(top_logprobs[index]).map(([token, logprob]) => ({\n          token,\n          probability: Math.exp(logprob)\n        })) : []\n      }));\n\n      // Add assistant message\n      const assistantMessage = {\n        type: 'assistant',\n        tokens: processedTokens\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      console.log('Response:', response);\n      console.log('Processed tokens:', processedTokens);\n    } catch (err) {\n      console.error('Error:', err);\n      setError('Failed to get response. Please check your API key and try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to determine color based on probability\n  const getColor = probability => {\n    if (probability >= 0.5) return 'green';\n    if (probability >= 0.2) return 'yellow';\n    return 'red';\n  };\n\n  // Format probability as percentage\n  const formatProbability = prob => `${(prob * 100).toFixed(1)}%`;\n  const renderTokens = tokens => {\n    // Group tokens into words more intelligently\n    const words = [];\n    let currentWord = [];\n    let currentWordProbability = 0;\n    let tokenCount = 0;\n    tokens.forEach(tObj => {\n      // Clean the token from special characters\n      const cleanToken = tObj.token.replace('Ġ', '');\n\n      // Start a new word if:\n      // 1. Current token starts with a space\n      // 2. Current token is punctuation\n      // 3. We're at the start\n      if (tObj.token.startsWith('Ġ') || tObj.token.match(/^[.,!?;:]/) || currentWord.length === 0) {\n        if (currentWord.length > 0) {\n          // Calculate average probability for the word\n          const avgProb = currentWordProbability / tokenCount;\n          words.push({\n            tokens: currentWord,\n            averageProbability: avgProb\n          });\n        }\n        currentWord = [tObj];\n        currentWordProbability = tObj.probability;\n        tokenCount = 1;\n      } else {\n        currentWord.push(tObj);\n        currentWordProbability += tObj.probability;\n        tokenCount++;\n      }\n    });\n\n    // Add the last word if exists\n    if (currentWord.length > 0) {\n      const avgProb = currentWordProbability / tokenCount;\n      words.push({\n        tokens: currentWord,\n        averageProbability: avgProb\n      });\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        lineHeight: '1.8',\n        whiteSpace: 'pre-wrap'\n      },\n      children: words.map((word, wordIndex) => {\n        const avgProb = word.averageProbability;\n        const combinedText = word.tokens.map(t => t.token.replace('Ġ', '')).join('');\n        return /*#__PURE__*/_jsxDEV(Tippy, {\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-tooltip\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Word:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 24\n              }, this), \" \\\"\", combinedText, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Confidence:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 24\n              }, this), \" \", formatProbability(avgProb)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Tokens:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this), word.tokens.map((tObj, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: '10px'\n              },\n              children: [\"\\u2022 \\\"\", tObj.token, \"\\\": \", formatProbability(tObj.probability)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this),\n          placement: \"top\",\n          arrow: true,\n          duration: 200,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word\",\n            style: {\n              backgroundColor: getColor(avgProb),\n              padding: '2px 4px',\n              margin: '0 1px',\n              borderRadius: '3px',\n              display: 'inline-block',\n              cursor: 'help'\n            },\n            children: combinedText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, wordIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"OpenAI Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: 'green'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"High confidence (\\u226550%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: 'yellow'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Medium confidence (20-49%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: 'red'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Low confidence (<20%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: message.type === 'user' ? 'You' : 'Assistant'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.type === 'user' ? message.content : renderTokens(message.tokens)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: \"Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content typing\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"prompt-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: prompt,\n          onChange: e => setPrompt(e.target.value),\n          placeholder: \"Type your message...\",\n          disabled: isLoading,\n          className: \"prompt-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          className: \"submit-button\",\n          children: isLoading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"d+/jIEN7xUru329uRACvA70Dyjs=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","getCompletion","Tippy","jsxDEV","_jsxDEV","Chat","_s","prompt","setPrompt","isLoading","setIsLoading","error","setError","messages","setMessages","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSubmit","e","preventDefault","trim","userMessage","type","content","prev","response","text","logprobs","choices","tokens","token_logprobs","top_logprobs","processedTokens","map","token","index","probability","Math","exp","alternatives","Object","entries","logprob","assistantMessage","console","log","err","getColor","formatProbability","prob","toFixed","renderTokens","words","currentWord","currentWordProbability","tokenCount","forEach","tObj","cleanToken","replace","startsWith","match","length","avgProb","push","averageProbability","style","lineHeight","whiteSpace","children","word","wordIndex","combinedText","t","join","className","fileName","_jsxFileName","lineNumber","columnNumber","i","marginLeft","placement","arrow","duration","backgroundColor","padding","margin","borderRadius","display","cursor","message","ref","onSubmit","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/sjobergf/Documents/chatProbs/token-prob-chat/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { getCompletion } from '../services/openaiService';\nimport Tippy from '@tippyjs/react';\nimport 'tippy.js/dist/tippy.css';\nimport './Chat.css';\n\nconst Chat = () => {\n  const [prompt, setPrompt] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!prompt.trim()) return;\n    \n    // Add user message immediately\n    const userMessage = {\n      type: 'user',\n      content: prompt.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    \n    setIsLoading(true);\n    setError('');\n    setPrompt(''); // Clear input after sending\n    \n    try {\n      const response = await getCompletion(prompt);\n      \n      // Extract tokens and their probabilities from the completions API response\n      const { text, logprobs } = response.choices[0];\n      const { tokens, token_logprobs, top_logprobs } = logprobs;\n      \n      // Create token objects with probability data\n      const processedTokens = tokens.map((token, index) => ({\n        token,\n        probability: Math.exp(token_logprobs[index]), // Convert log probability to probability\n        alternatives: top_logprobs[index] ? Object.entries(top_logprobs[index]).map(([token, logprob]) => ({\n          token,\n          probability: Math.exp(logprob)\n        })) : []\n      }));\n      \n      // Add assistant message\n      const assistantMessage = {\n        type: 'assistant',\n        tokens: processedTokens\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      \n      console.log('Response:', response);\n      console.log('Processed tokens:', processedTokens);\n    } catch (err) {\n      console.error('Error:', err);\n      setError('Failed to get response. Please check your API key and try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to determine color based on probability\n  const getColor = (probability) => {\n    if (probability >= 0.5) return 'green';\n    if (probability >= 0.2) return 'yellow';\n    return 'red';\n  };\n\n  // Format probability as percentage\n  const formatProbability = (prob) => `${(prob * 100).toFixed(1)}%`;\n\n  const renderTokens = (tokens) => {\n    // Group tokens into words more intelligently\n    const words = [];\n    let currentWord = [];\n    let currentWordProbability = 0;\n    let tokenCount = 0;\n    \n    tokens.forEach((tObj) => {\n      // Clean the token from special characters\n      const cleanToken = tObj.token.replace('Ġ', '');\n      \n      // Start a new word if:\n      // 1. Current token starts with a space\n      // 2. Current token is punctuation\n      // 3. We're at the start\n      if (tObj.token.startsWith('Ġ') || \n          tObj.token.match(/^[.,!?;:]/) || \n          currentWord.length === 0) {\n        \n        if (currentWord.length > 0) {\n          // Calculate average probability for the word\n          const avgProb = currentWordProbability / tokenCount;\n          words.push({\n            tokens: currentWord,\n            averageProbability: avgProb\n          });\n        }\n        currentWord = [tObj];\n        currentWordProbability = tObj.probability;\n        tokenCount = 1;\n      } else {\n        currentWord.push(tObj);\n        currentWordProbability += tObj.probability;\n        tokenCount++;\n      }\n    });\n    \n    // Add the last word if exists\n    if (currentWord.length > 0) {\n      const avgProb = currentWordProbability / tokenCount;\n      words.push({\n        tokens: currentWord,\n        averageProbability: avgProb\n      });\n    }\n\n    return (\n      <div style={{ lineHeight: '1.8', whiteSpace: 'pre-wrap' }}>\n        {words.map((word, wordIndex) => {\n          const avgProb = word.averageProbability;\n          const combinedText = word.tokens\n            .map(t => t.token.replace('Ġ', ''))\n            .join('');\n\n          return (\n            <Tippy\n              key={wordIndex}\n              content={\n                <div className=\"token-tooltip\">\n                  <div><strong>Word:</strong> \"{combinedText}\"</div>\n                  <div><strong>Confidence:</strong> {formatProbability(avgProb)}</div>\n                  <div><strong>Tokens:</strong></div>\n                  {word.tokens.map((tObj, i) => (\n                    <div key={i} style={{marginLeft: '10px'}}>\n                      • \"{tObj.token}\": {formatProbability(tObj.probability)}\n                    </div>\n                  ))}\n                </div>\n              }\n              placement=\"top\"\n              arrow={true}\n              duration={200}\n            >\n              <span\n                className=\"word\"\n                style={{ \n                  backgroundColor: getColor(avgProb),\n                  padding: '2px 4px',\n                  margin: '0 1px',\n                  borderRadius: '3px',\n                  display: 'inline-block',\n                  cursor: 'help'\n                }}\n              >\n                {combinedText}\n              </span>\n            </Tippy>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>OpenAI Chat</h1>\n        <div className=\"legend\">\n          <div className=\"legend-item\">\n            <span className=\"legend-color\" style={{ backgroundColor: 'green' }}></span>\n            <span>High confidence (≥50%)</span>\n          </div>\n          <div className=\"legend-item\">\n            <span className=\"legend-color\" style={{ backgroundColor: 'yellow' }}></span>\n            <span>Medium confidence (20-49%)</span>\n          </div>\n          <div className=\"legend-item\">\n            <span className=\"legend-color\" style={{ backgroundColor: 'red' }}></span>\n            <span>Low confidence (&lt;20%)</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"messages-container\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-header\">{message.type === 'user' ? 'You' : 'Assistant'}</div>\n            <div className=\"message-content\">\n              {message.type === 'user' ? (\n                message.content\n              ) : (\n                renderTokens(message.tokens)\n              )}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant\">\n            <div className=\"message-header\">Assistant</div>\n            <div className=\"message-content typing\">Typing...</div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <div className=\"input-container\">\n        <form onSubmit={handleSubmit} className=\"prompt-form\">\n          <input\n            type=\"text\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Type your message...\"\n            disabled={isLoading}\n            className=\"prompt-input\"\n          />\n          <button type=\"submit\" disabled={isLoading} className=\"submit-button\">\n            {isLoading ? 'Sending...' : 'Send'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}