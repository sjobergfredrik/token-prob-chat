{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nconst API_URL = 'https://api.openai.com/v1/completions';\n\n/**\n * Sends a prompt to OpenAI API and retrieves the response with token probabilities\n * @param {string} prompt - The user's input prompt\n * @param {number} maxTokens - Maximum number of tokens to generate\n * @param {number} temperature - Controls randomness (0-1)\n * @param {number} logprobs - Number of most likely tokens to return\n * @returns {Promise} - The API response\n */\nexport const getCompletion = async (prompt, maxTokens = 50, temperature = 0.7, logprobs = 5) => {\n  try {\n    const response = await axios.post(API_URL, {\n      model: \"text-davinci-003\",\n      // Using a model that supports logprobs\n      prompt,\n      max_tokens: maxTokens,\n      temperature,\n      logprobs\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","API_URL","getCompletion","prompt","maxTokens","temperature","logprobs","response","post","model","max_tokens","headers","data","error","console"],"sources":["/Users/sjobergf/Documents/chatProbs/token-prob-chat/src/services/openaiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nconst API_URL = 'https://api.openai.com/v1/completions';\n\n/**\n * Sends a prompt to OpenAI API and retrieves the response with token probabilities\n * @param {string} prompt - The user's input prompt\n * @param {number} maxTokens - Maximum number of tokens to generate\n * @param {number} temperature - Controls randomness (0-1)\n * @param {number} logprobs - Number of most likely tokens to return\n * @returns {Promise} - The API response\n */\nexport const getCompletion = async (prompt, maxTokens = 50, temperature = 0.7, logprobs = 5) => {\n  try {\n    const response = await axios.post(\n      API_URL,\n      {\n        model: \"text-davinci-003\", // Using a model that supports logprobs\n        prompt,\n        max_tokens: maxTokens,\n        temperature,\n        logprobs,\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        }\n      }\n    );\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AACpD,MAAMC,OAAO,GAAG,uCAAuC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,SAAS,GAAG,EAAE,EAAEC,WAAW,GAAG,GAAG,EAAEC,QAAQ,GAAG,CAAC,KAAK;EAC9F,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAC/BP,OAAO,EACP;MACEQ,KAAK,EAAE,kBAAkB;MAAE;MAC3BN,MAAM;MACNO,UAAU,EAAEN,SAAS;MACrBC,WAAW;MACXC;IACF,CAAC,EACD;MACEK,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUd,OAAO;MACpC;IACF,CACF,CAAC;IAED,OAAOU,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}